language: cpp

matrix:
  include:
    - os: linux
      dist: trusty
      env:
        - BUILD_TOOL=CMake
        - OS=Linux
      sudo: require
    - os: osx
      osx_image: xcode7.3
      env:
        - BUILD_TOOL=Xcode
        - OS=OSX
    - os: osx
      osx_image: xcode7.3
      env:
        - BUILD_TOOL=CMake
        - OS=OSX
  exclude:
    - compiler: clang

git:
  submodules: false

branches:
  only:
    - master

compiler: clang

before_script:
  # Take care of dependencies.
  - sed -i -e 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - ./setup.sh
  - >
    if [ "$OS" = "OSX" ]; then
      xcodebuild -configuration Release -target emptyExample \
        -project "third-party/openFrameworks/scripts/templates/osx/emptyExample.xcodeproj"
    else
      # Linux/Ubuntu
      sudo third-party/openFrameworks/scripts/ci/linux/install.sh
      sudo third-party/openFrameworks/scripts/ci/linux/build.sh
      sudo apt-get -y install doxygen
      sudo apt-get -y install cmake
      # Build GRT
      cd third-party/grt/build
      mkdir -p tmp && cd tmp
      cmake .. -DBUILD_EXAMPLES=OFF
      make
      sudo make install
      cd ../../../../
    fi
  # CMake
  - >
    if [ "$BUILD_TOOL" = "CMake" ]; then
      mkdir build
      cd build
      cmake ..
    fi
script:
  - >
    if [ "$BUILD_TOOL" = "CMake" ]; then
      set -e
      # I am in $ROOT/build folder
      USER_CPP=../Xcode/ESP/src/user.cpp
      EXAMPLES=../Xcode/ESP/src/examples/*
      for f in $EXAMPLES
      do
        name=$(basename "$f")
        echo "Compiling example: $f ..."
        echo "#include \"user.h\"" > $USER_CPP
        echo "#include \"examples/$name\"" >> $USER_CPP
        make
      done
    fi;
  - >
    if [ "$BUILD_TOOL" = "Xcode" ]; then
      xcodebuild -configuration Release -target ESP -project "Xcode/ESP/ESP.xcodeproj"
    fi
cache:
  directories:
    - third-party/openFrameworks/libs
